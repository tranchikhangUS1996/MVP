// Generated by Dagger (https://google.github.io/dagger).
package com.example.lap60020_local.retrofit.DI.component;

import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideApiFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideListFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideModelFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideNowPlayingLoaderFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideNowPresenterFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvidePopularPresenterFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvidePopularloaderFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideRetrofitFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideSearchLoaderFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideSearchModelFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideSearchPresenterFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideTopPresenterFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideTopRatedLoaderFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideUpPresenterFactory;
import com.example.lap60020_local.retrofit.DI.Module.MyAdapterModule_ProvideUpcommingLoaderFactory;
import com.example.lap60020_local.retrofit.Model.Data.MyApi;
import com.example.lap60020_local.retrofit.MyApplication;
import com.example.lap60020_local.retrofit.MyApplication_MembersInjector;
import com.example.lap60020_local.retrofit.Presenter.IsearchPresenter;
import com.example.lap60020_local.retrofit.Presenter.mIPresenter;
import com.example.lap60020_local.retrofit.UI.DetailActivity;
import com.example.lap60020_local.retrofit.UI.DetailActivity_MembersInjector;
import com.example.lap60020_local.retrofit.UI.MyAdapter;
import com.example.lap60020_local.retrofit.UI.MyAdapter_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerComponent implements Component {
  private MyAdapterModule myAdapterModule;

  private Provider<Retrofit> provideRetrofitProvider;

  private MyAdapterModule_ProvidePopularloaderFactory providePopularloaderProvider;

  private MyAdapterModule_ProvideListFactory provideListProvider;

  private MyAdapterModule_ProvideApiFactory provideApiProvider;

  private MyAdapterModule_ProvideModelFactory provideModelProvider;

  private Provider<mIPresenter> providePopularPresenterProvider;

  private MyAdapterModule_ProvideTopRatedLoaderFactory provideTopRatedLoaderProvider;

  private Provider<mIPresenter> provideTopPresenterProvider;

  private MyAdapterModule_ProvideNowPlayingLoaderFactory provideNowPlayingLoaderProvider;

  private Provider<mIPresenter> provideNowPresenterProvider;

  private MyAdapterModule_ProvideUpcommingLoaderFactory provideUpcommingLoaderProvider;

  private Provider<mIPresenter> provideUpPresenterProvider;

  private MyAdapterModule_ProvideSearchLoaderFactory provideSearchLoaderProvider;

  private MyAdapterModule_ProvideSearchModelFactory provideSearchModelProvider;

  private Provider<IsearchPresenter> provideSearchPresenterProvider;

  private DaggerComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static Component create() {
    return new Builder().build();
  }

  private MyApi getMyApi() {
    return MyAdapterModule_ProvideApiFactory.proxyProvideApi(
        myAdapterModule, provideRetrofitProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.myAdapterModule = builder.myAdapterModule;
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvideRetrofitFactory.create(builder.myAdapterModule));
    this.providePopularloaderProvider =
        MyAdapterModule_ProvidePopularloaderFactory.create(builder.myAdapterModule);
    this.provideListProvider = MyAdapterModule_ProvideListFactory.create(builder.myAdapterModule);
    this.provideApiProvider =
        MyAdapterModule_ProvideApiFactory.create(builder.myAdapterModule, provideRetrofitProvider);
    this.provideModelProvider =
        MyAdapterModule_ProvideModelFactory.create(
            builder.myAdapterModule, provideListProvider, provideApiProvider);
    this.providePopularPresenterProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvidePopularPresenterFactory.create(
                builder.myAdapterModule, providePopularloaderProvider, provideModelProvider));
    this.provideTopRatedLoaderProvider =
        MyAdapterModule_ProvideTopRatedLoaderFactory.create(builder.myAdapterModule);
    this.provideTopPresenterProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvideTopPresenterFactory.create(
                builder.myAdapterModule, provideTopRatedLoaderProvider, provideModelProvider));
    this.provideNowPlayingLoaderProvider =
        MyAdapterModule_ProvideNowPlayingLoaderFactory.create(builder.myAdapterModule);
    this.provideNowPresenterProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvideNowPresenterFactory.create(
                builder.myAdapterModule, provideNowPlayingLoaderProvider, provideModelProvider));
    this.provideUpcommingLoaderProvider =
        MyAdapterModule_ProvideUpcommingLoaderFactory.create(builder.myAdapterModule);
    this.provideUpPresenterProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvideUpPresenterFactory.create(
                builder.myAdapterModule, provideUpcommingLoaderProvider, provideModelProvider));
    this.provideSearchLoaderProvider =
        MyAdapterModule_ProvideSearchLoaderFactory.create(builder.myAdapterModule);
    this.provideSearchModelProvider =
        MyAdapterModule_ProvideSearchModelFactory.create(
            builder.myAdapterModule, provideListProvider, provideApiProvider);
    this.provideSearchPresenterProvider =
        DoubleCheck.provider(
            MyAdapterModule_ProvideSearchPresenterFactory.create(
                builder.myAdapterModule, provideSearchLoaderProvider, provideSearchModelProvider));
  }

  @Override
  public void inject(MyAdapter adapter) {
    injectMyAdapter(adapter);
  }

  @Override
  public void inject(DetailActivity detailActivity) {
    injectDetailActivity(detailActivity);
  }

  @Override
  public void inject(MyApplication application) {
    injectMyApplication(application);
  }

  private MyAdapter injectMyAdapter(MyAdapter instance) {
    MyAdapter_MembersInjector.injectMoviesFilterd(
        instance, MyAdapterModule_ProvideListFactory.proxyProvideList(myAdapterModule));
    return instance;
  }

  private DetailActivity injectDetailActivity(DetailActivity instance) {
    DetailActivity_MembersInjector.injectApi(instance, getMyApi());
    return instance;
  }

  private MyApplication injectMyApplication(MyApplication instance) {
    MyApplication_MembersInjector.injectPopularPresenter(
        instance, providePopularPresenterProvider.get());
    MyApplication_MembersInjector.injectTopRatedPresenter(
        instance, provideTopPresenterProvider.get());
    MyApplication_MembersInjector.injectNowPlayingPresenter(
        instance, provideNowPresenterProvider.get());
    MyApplication_MembersInjector.injectUpCommingPresenter(
        instance, provideUpPresenterProvider.get());
    MyApplication_MembersInjector.injectSearchPresenter(
        instance, provideSearchPresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private MyAdapterModule myAdapterModule;

    private Builder() {}

    public Component build() {
      if (myAdapterModule == null) {
        this.myAdapterModule = new MyAdapterModule();
      }
      return new DaggerComponent(this);
    }

    public Builder myAdapterModule(MyAdapterModule myAdapterModule) {
      this.myAdapterModule = Preconditions.checkNotNull(myAdapterModule);
      return this;
    }
  }
}
