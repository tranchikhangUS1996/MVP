// Generated by Dagger (https://google.github.io/dagger).
package com.example.lap60020_local.retrofit.DI.Module;

import com.example.lap60020_local.retrofit.Model.Data.Movie;
import com.example.lap60020_local.retrofit.Model.Data.MyApi;
import com.example.lap60020_local.retrofit.Model.IModel;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.List;
import javax.inject.Provider;

public final class MyAdapterModule_ProvideModelFactory implements Factory<IModel> {
  private final MyAdapterModule module;

  private final Provider<List<Movie>> listProvider;

  private final Provider<MyApi> apiProvider;

  public MyAdapterModule_ProvideModelFactory(
      MyAdapterModule module, Provider<List<Movie>> listProvider, Provider<MyApi> apiProvider) {
    this.module = module;
    this.listProvider = listProvider;
    this.apiProvider = apiProvider;
  }

  @Override
  public IModel get() {
    return provideInstance(module, listProvider, apiProvider);
  }

  public static IModel provideInstance(
      MyAdapterModule module, Provider<List<Movie>> listProvider, Provider<MyApi> apiProvider) {
    return proxyProvideModel(module, listProvider.get(), apiProvider.get());
  }

  public static MyAdapterModule_ProvideModelFactory create(
      MyAdapterModule module, Provider<List<Movie>> listProvider, Provider<MyApi> apiProvider) {
    return new MyAdapterModule_ProvideModelFactory(module, listProvider, apiProvider);
  }

  public static IModel proxyProvideModel(MyAdapterModule instance, List<Movie> list, MyApi api) {
    return Preconditions.checkNotNull(
        instance.provideModel(list, api),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
