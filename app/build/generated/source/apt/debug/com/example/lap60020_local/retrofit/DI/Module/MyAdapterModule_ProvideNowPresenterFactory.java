// Generated by Dagger (https://google.github.io/dagger).
package com.example.lap60020_local.retrofit.DI.Module;

import com.example.lap60020_local.retrofit.Loader.NowPlayingLoader;
import com.example.lap60020_local.retrofit.Model.IModel;
import com.example.lap60020_local.retrofit.Presenter.mIPresenter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MyAdapterModule_ProvideNowPresenterFactory implements Factory<mIPresenter> {
  private final MyAdapterModule module;

  private final Provider<NowPlayingLoader> nowPlayingLoaderProvider;

  private final Provider<IModel> modelProvider;

  public MyAdapterModule_ProvideNowPresenterFactory(
      MyAdapterModule module,
      Provider<NowPlayingLoader> nowPlayingLoaderProvider,
      Provider<IModel> modelProvider) {
    this.module = module;
    this.nowPlayingLoaderProvider = nowPlayingLoaderProvider;
    this.modelProvider = modelProvider;
  }

  @Override
  public mIPresenter get() {
    return provideInstance(module, nowPlayingLoaderProvider, modelProvider);
  }

  public static mIPresenter provideInstance(
      MyAdapterModule module,
      Provider<NowPlayingLoader> nowPlayingLoaderProvider,
      Provider<IModel> modelProvider) {
    return proxyProvideNowPresenter(module, nowPlayingLoaderProvider.get(), modelProvider.get());
  }

  public static MyAdapterModule_ProvideNowPresenterFactory create(
      MyAdapterModule module,
      Provider<NowPlayingLoader> nowPlayingLoaderProvider,
      Provider<IModel> modelProvider) {
    return new MyAdapterModule_ProvideNowPresenterFactory(
        module, nowPlayingLoaderProvider, modelProvider);
  }

  public static mIPresenter proxyProvideNowPresenter(
      MyAdapterModule instance, NowPlayingLoader nowPlayingLoader, IModel model) {
    return Preconditions.checkNotNull(
        instance.provideNowPresenter(nowPlayingLoader, model),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
