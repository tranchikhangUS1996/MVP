// Generated by Dagger (https://google.github.io/dagger).
package com.example.lap60020_local.retrofit.DI.Module;

import com.example.lap60020_local.retrofit.Model.Data.MyApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class MyAdapterModule_ProvideApiFactory implements Factory<MyApi> {
  private final MyAdapterModule module;

  private final Provider<Retrofit> retrofitProvider;

  public MyAdapterModule_ProvideApiFactory(
      MyAdapterModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public MyApi get() {
    return provideInstance(module, retrofitProvider);
  }

  public static MyApi provideInstance(MyAdapterModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideApi(module, retrofitProvider.get());
  }

  public static MyAdapterModule_ProvideApiFactory create(
      MyAdapterModule module, Provider<Retrofit> retrofitProvider) {
    return new MyAdapterModule_ProvideApiFactory(module, retrofitProvider);
  }

  public static MyApi proxyProvideApi(MyAdapterModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideApi(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
